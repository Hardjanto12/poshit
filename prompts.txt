"I want to build a Point of Sales Android app named 'PoSHIT'.

Core Features:

User registration and login (using basic simple sqlite manual auth);
User add, delete, edit product/services;
User add transactions;
User view transactions history;

A main app for a cashier to help generate invoice and record all transactions.

Technology Stack:
Language: Flutter
Backend: SQLITE


A 'Product' in the SQLite database should have the following fields:

id (integer, primary key),
name (text, not null),
price (real, not null),
sku (text, unique, can be null),
stock_quantity (integer, default 0),
date created (date when the data created),
date updated (date when the data updated/edited)

The 'User' should have the following fields:

id (integer, primary key),
name (text, not null),
username (text, not null, no whitespace),
password (text, hashed),
date created (date when the data created),
date updated (date when the data updated/edited)


** UPDATE **

"Okay, let's build the core transaction and checkout feature for the 'PoSHIT' app.

1. Database Schema:
First, define the necessary database tables using sqflite.

Create a transactions table with these fields:

id (integer, primary key)

total_amount (real, not null)

amount_received (real, not null)

change (real, not null)

transaction_date (text, not null)

Create a transaction_items linking table to know which products were in which transaction:

id (integer, primary key)

transaction_id (integer, foreign key to transactions table)

product_id (integer, foreign key to products table)

quantity (integer, not null)

Also, generate the Dart model classes for Transaction and TransactionItem.

2. Currency Formatting:
Next, create a Dart utility function named formatToIDR. It should take a double as input and, using the intl package, return a String formatted as Indonesian Rupiah (e.g., 50000 becomes "Rp50.000").

3. Checkout UI Logic:
Finally, for the UI, when a cashier finalizes a sale:

The screen must display the Total Amount using the formatToIDR function.

There must be a text input field for the cashier to enter the 'Cash Received' from the customer.

As the cashier types in the 'Cash Received' field, the app must automatically calculate the 'Change' (Cash Received - Total Amount) and display it in real-time, also formatted using formatToIDR.

Upon completion, the new transaction and all its items should be saved to the database."

** UPDATE 2 **

Let's build a Reporting Dashboard screen. This screen should have three main sections:

Today's Summary: Display cards showing today's total sales revenue (in IDR), the total number of transactions today, and the average sale value per transaction.

Top Products: Show a list of the 5 best-selling products by quantity sold over the last 30 days.

Sales History: Display a simple list of all past transactions, with the most recent at the top. Tapping on a transaction should show its detailed contents.

This will require creating new query functions in the DatabaseHelper to calculate these statistics from the transactions and transaction_items tables

Next, I want to generate a PDF receipt. After a transaction is successfully completed, a dialog should appear.

The dialog should show the transaction summary (total, cash received, change).

It should have a 'Generate & Share PDF' button.

When tapped, use the printing and pdf packages to create a simple PDF receipt containing the store name, transaction details, items purchased, and total amount. Then, bring up the native share sheet to send it via WhatsApp, email, etc.


** UPDATE 3 **

Now, edit the transaction list, i want the transaction list screen has filter by date. And generate the transaction list into pdf.  

I also want to print automatically print the current finished transaction with bluetooth printer or other common mobile printing practice. The flow is, user create transaction, input customer money, and then show the invoice page together with printing the invoice, add other menu option to print or save to pdf. 

** UPDATE 4 **
Create the receipt feature with a preview screen.

Navigation: After a transaction is successfully completed, the app should automatically navigate to a new full-screen page called ReceiptPreviewScreen.

Screen Layout: The ReceiptPreviewScreen must display a visual preview of the receipt. This preview should be a widget that looks like a real receipt and contains:

The store name

Transaction ID and date

A list of all items sold, with quantities and prices

Subtotal, discount amount, and the final total

Cash received and change given

Action Buttons: At the bottom of the screen, include two prominent buttons:

A 'Print' button: When tapped, this should use the blue_thermal_printer package to send the receipt data to a paired Bluetooth thermal printer.

A 'Download PDF' button: When tapped, this should use the pdf and path_provider packages to generate a PDF file of the receipt and save it to the device's public downloads folder. Show a confirmation message like 'Receipt saved to Downloads' when complete.

Closing the Screen: Add a 'Done' button in the app bar that, when tapped, navigates the user back to the main sales screen to start a new transaction."

** UPDATE 5 **

Let's upgrade the printing feature to support multiple connection types.

Printer Settings Screen: First, create a new 'Printer Settings' page in the app. On this page, the user must be able to select their preferred printer type from a choice:

Bluetooth

System Printer (for USB/Wired)

The app should save this choice so it remembers it for next time.

Conditional Print Logic: Now, update the 'Print' button on the ReceiptPreviewScreen. Its behavior must change based on the setting saved above:

If 'Bluetooth' is selected, use the blue_thermal_printer package to send the print job directly to the paired Bluetooth device.

If 'System Printer' is selected, use the printing package to generate a PDF of the receipt and open the operating system's native print dialog. This will allow me to select my connected USB printer on desktop or any other printer configured on the OS."

** UPDATE 6 **

Let's finalize the receipt generation with optimized outputs for each function. On the ReceiptPreviewScreen, I need two distinct buttons:

'Download PDF' Button: This function should work as planned. It will use the pdf package to generate a high-quality, visually formatted PDF file. This file is for digital use (emailing, saving) or for printing on a standard office printer.

'Print' Button: This button is exclusively for thermal receipt printers. Its function must be to:

Not create a PDF.

Instead, use a package like esc_pos_utils_plus to build the receipt as a sequence of raw text and ESC/POS commands (for text alignment, bolding, and the paper cut command).

Send these raw commands directly to the connected printer (either Bluetooth or USB, based on the settings)."